<?php

/**
* @file
* Jira installation
*/

/**
* Implements hook_install()
*/
function jira_analysis_install() {
  //get localization function for installation as t() may be unavailable
  $t = get_t();
  variable_set('jira_analysis_default_url', '');
  variable_set('jira_analysis_default_user_name', '');
  variable_set('jira_analysis_default_password', '');
  variable_set('jira_analysis_default_statuses', array());

  //install schema
  //drupal_install_schema('jira_analysis');

  //Give user feedback
  drupal_set_message($t('Jira Analysis variables created.'));

  //define a content type
  $content_type = array(
    'type'=> 'jira_analysis',
    'name' => $t('Jira Analysis'),
    'description' => $t('A report of Jira Tickets'),
    'title_label' => $t('Report Type'),
    'base' => 'node_content',
    'custom' => TRUE,
  );

  // Set remaining definitions with defaults
  $node_type = node_type_set_defaults($content_type);

  // Save content type
  node_type_save($node_type);

  // Add a field for the body
  node_add_body_field($node_type, $t('Description'));

  //Create fields
  $fields = array();

  $statusList = array();

  $fields['jira_analysis_status'] = array(
    'field_name' => 'jira_analysis_status',
    'type' => 'list_text',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'options' => $statusList,
  );

  $fields['jira_analysis_jql'] = array(
    'field_name' => 'jira_analysis_jql',
    'type' => 'text',
    'settings' => array(
      'max_length' => 350,
    ),
  );

  $chartList = array(
		'gantt' => t('Gantt'),
		'column' => t('Column'),
		'bar' => t('Bar'),
		'queuedTime' => t('Queued Time'),
  );

  $fields['jira_analysis_chart_type'] = array(
		'field_name' => 'jira_analysis_chart_type',
		'type' => 'list_text',
		'options' => $chartList,
  );

  //loop through the array and create fields
  foreach ($fields as $field) {
    field_create_field($field);
  }

  // Create Field Instances
  $instances = array();

  $instances['jira_analysis_fixversion'] = array(
    'field_name' => 'jira_analysis_jql',
    'label' => $t('JQL'),
    'description' => $t('A JQL query from Jira, copy as is'),
    'widget' => array(
      'type' => 'text',
    ),
    'required' => FALSE,
    'settings' => array(
      'max_length' => 350,
    ),
  );

  $instances['jira_analysis_status'] = array(
    'field_name' => 'jira_analysis_status',
    'label' => $t('Jira Statuses'),
    'description' => $t('status description'),
    'widget' => array(
      'type' => 'options_buttons',
    ),
    'required' => FALSE,
  );

  $instances['jira_analysis_chart_type'] = array(
		'field_name' => 'jira_analysis_chart_type',
		'label' => $t('Chart Type'),
		'description' => $t('Chart type to display'),
		'widget' => array(
	    'type' => 'options_select'
		),
		'required' => TRUE,
  );
 
  foreach ($instances as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'jira_analysis';
    field_create_instance($instance);
  }
}

/**
* Implements hook_schema
*/
function jira_analysis_schema() {
  $t = get_t();
  $schema['jira_analysis_status'] = array(
    'fields' => array(
	    'status_id' => array('type' => 'varchar', 'length' => 20, 'not null' => TRUE),
	    'status_name' => array('type' => 'varchar', 'length' => 50, 'not null' => TRUE),
	    'status_description' => array('type' => 'varchar', 'length' => 150, 'not null' => TRUE),
	    'created' => array('type' => 'int', 'not null' => TRUE),
    ),
  );
  drupal_set_message($t('Jira Analysis Status table created'));

   $schema['jira_ref_cumulative_flow'] = array(
	   'fields' => array(
			  'cf_type_id' => array('type' => 'int', 'not null' => TRUE),
			  'cf_type_name' => array('type' => 'varchar', 'length' => '60', 'not null' => TRUE),
			  'cf_type_description' => array('type' => 'varchar', 'length' => '500'),
			  'created' => array('type' => 'int', 'not null' => TRUE),
			  'updated' => array('type' => 'int'),
	   ),
		 'primary key' => array('cf_type_id'),
   );
   $schema['jira_cumulative_flow'] = array(
		  'fields' => array(
			  'cf_id' => array('type' => 'serial', 'not null' => TRUE ),
				'cf_type_id' => array('type' => 'int', 'not null' => TRUE),
				'cf_daily_thruput' => array('type' => 'int', 'default' => 0),
				'cf_daily_wip' => array('type'=> 'int', 'default' => 0),
				'cf_date' => array('type' => 'int', 'not null'=> TRUE),
				'created' => array('type' => 'int', 'not null' => TRUE),
		  ),
		  'primary key' => array('cf_id'),
   );

   $schema['jira_ref_cycle_time'] = array(
	   'fields' => array(
		   'ct_type_id' => array('type' => 'serial', 'not null' => TRUE),
			 'ct_type_name' => array('type' => 'varchar', 'length' => '60', 'not null' => TRUE),
			 'ct_type_description' => array('type' => 'varchar', 'length' => '500'),
			 'created' => array('type' => 'int', 'not null' => TRUE),
			 'updated' => array('type' => 'int'),
		 ),
		 'primary key' => array('ct_type_id'),
   );

   $schema['jira_cycle_time'] = array(
	   'fields' => array(
		   'ct_id' => array('type' => 'serial', 'not null' => TRUE),
			 'ct_type_id' => array('type' => 'int', 'not null' => TRUE),
			 'ct_date' => array('type' => 'int', 'not null' => TRUE),
			 'ct_avg' => array('type' => 'float', 'not null' => TRUE),
			 'ct_std_dev' => array('type' => 'float', 'not null' => TRUE),
			 'ct_median' => array('type' => 'float', 'not null' => TRUE),
		 ),
	   'primary key' => array('ct_id'),
   );

  return $schema;
}


/**
* Implements hook_uninstall()
*/
function jira_analysis_uninstall(){
  $t = get_t();

  //Delete variables
  variable_del('jira_analysis_default_url');
  variable_del('jira_analysis_default_user_name');
  variable_del('jira_analysis_default_password');

  //drop the jira_analysis_status table
  db_drop_table('jira_analysis_status');
  db_drop_table('jira_ref_cumulative_flow');
  db_drop_table('jira_cumulative_flow');
  db_drop_table('jira_ref_cycle_time');
  db_drop_table('jira_cycle_time');
  drupal_set_message($t('Tables Removed'));

  // Get all node ids with  Jira Analysis Content type
  $sql_query = 'SELECT nid ';
  $sql_query .= 'FROM {node} ';
  $sql_query .= 'WHERE {node}.type = :type';
  $result = db_query($sql_query, array(':type' => 'jira_analysis'));

  $nids = array();
  foreach ($result as $row){
    $nids[] = $row->nid;
  }

  //Delete all windfarm content
  node_delete_multiple($nids);
  drupal_set_message($t('Jira Analysis Content removed'));

  // Remove all fields and field instances
  foreach (field_info_instances('node','jira_analysis') as $field_name => $instance) {
    field_delete_instance($instance);
  }

  drupal_set_message($t('Jira Analysis field and field instances removed'));

  node_type_delete('jira_analysis');

  drupal_set_message($t('Jira Analysis contant type removed'));

  field_purge_batch(1000);
  //Inform user of removal

  drupal_set_message($t('Jira Analysis settings saved'));
}