<?php

 /**
 * @file
 * Jira installation
 */
 
 /**
  * Implements hook_install()
  */
 function jira_analysis_install() {
 	//get localization function for installation as t() may be unavailable
	$t = get_t();
	variable_set('jira_analysis_default_url', '');
	variable_set('jira_analysis_default_user_name', '');
	variable_set('jira_analysis_default_password', '');
	variable_set('jira_analysis_default_status_list', array());
	
	//install schema
	//drupal_install_schema('jira_analysis');
	
	
	//Give user feedback
	drupal_set_message($t('Jira Analysis variables created.'));
	
	//define a content type
	$content_type = array(
		'type'=> 'jira_analysis',
		'name' => $t('Jira Analysis'),
		'description' => $t('A report of Jira Tickets'),
		'title_label' => $t('Report Type'),
		'base' => 'node_content',
		'custom' => TRUE,
	);
	
	// Set remaining definitions with defaults
	$node_type = node_type_set_defaults($content_type);
	
	// Save content type
	node_type_save($node_type);
	
	// Add a field for the body
	node_add_body_field($node_type, $t('Description'));
	
	//Create fields
	$fields = array();
	
	 //create options array
	  /*$statusList = array(
	  	1 => t("Open"),
		10023 => t("Pre-Slated"),
		10000 => t("Slated"),
		10001 => t("Development in Progress"),
		10029 => t("Stakeholder Review in Progress"),
		10016 => t("Queued for Code Review"),
		10017 => t("Code Review in Progress"),
		10002 => t("Queued for Staging QA"),
		10003 => t("Staged for QA"),
		10027 => t("Ready for Release"),
		5 => t("Newly Released"),
		6 => t("Closed"),
		10020 => t("Backlog"),
	  );*/

	
	$statusList = array();
  
  
  
  $fields['jira_analysis_status'] = array(
  	'field_name' => 'jira_analysis_status',
    'type' => 'list_text',
    'options' => $statusList,
  );
  
	$fields['jira_analysis_fixversion'] = array(
		'field_name' => 'jira_analysis_fixversion',
		'type' => 'text',
		'settings' => array(
			'max_length' => 75,
		),
	);
	
	
	
	//loop through the array and create fields
	foreach ($fields as $field) {
		field_create_field($field);
	}
	
	// Create Field Instances
	$instances = array();
	
	$instances['jira_analysis_fixversion'] = array(
		'field_name' => 'jira_analysis_fixversion',
		'label' => $t('Fix Version to use'),
		'description' => $t('Fix version(s) that ticket must be in'),
		'widget' => array(
			'type' => 'tableselect',
		),
		'required' => FALSE,
		'settings' => array(
			'text_processing' => 0,
		),
	);
	
	$instances['jira_analysis_status'] = array(
		'field_name' => 'jira_analysis_status',
		'label' => $t('Jira Statuses'),
		'description' => $t('status description'),
		'widget' => array(
			'type' => 'list_text',
		),
		'required' => FALSE,
	);
	

	// 
	foreach ($instances as $instance) {
		$instance['entity_type'] = 'node';
		$instance['bundle'] = 'jira_analysis';
		field_create_instance($instance);
	}
 }
 
 /**
  * Implements hook_schema
  */
  function jira_analysis_schema() {
  	$t = get_t();
	  $schema['jira_analysis_status'] = array(
	    'fields' => array(
	      'status_id' => array('type' => 'varchar', 'length' => 20, 'not null' => TRUE),
	      'status_name' => array('type' => 'varchar', 'length' => 50, 'not null' => TRUE),
	      'status_description' => array('type' => 'varchar', 'length' => 150, 'not null' => TRUE),
	      'created' => array('type' => 'int', 'not null' => TRUE),
	    ),
	  );
	  drupal_set_message($t('Jira Analysis Status table created'));
	  return $schema;
  }
  
 /**
  * Implements hook_uninstall()
  */
function jira_analysis_uninstall(){
	$t = get_t();
	
	//Delete variables
	variable_del('jira_analysis_default_url');
	variable_del('jira_analysis_default_user_name');
	variable_del('jira_analysis_default_password');

	//drop the jira_analysis_status table
	db_drop_table('jira_analysis_status');
	drupal_set_message($t('Jira Analysis Status Table Removed'));
	
	// Get all node ids with  Jira Analysis Content type
	$sql_query = 'SELECT nid ';
	$sql_query .= 'FROM {node} ';
	$sql_query .= 'WHERE {node}.type = :type';
	$result = db_query($sql_query, array(':type' => 'jira_analysis'));
	
	$nids = array();
	foreach ($result as $row){
		$nids[] = $row->nid;
	}
	
	//Delete all windfarm content
	node_delete_multiple($nids);
	drupal_set_message($t('Jira Analysis Content removed'));
	
	// Remove all fields and field instances
	foreach (field_info_instances('node','jira_analysis') as $field_name => $instance) {
		field_delete_instance($instance);
	}
	
	drupal_set_message($t('Jira Analysis field and field instances removed'));
	
	node_type_delete('jira_analysis');
	
	drupal_set_message($t('Jira Analysis contant type removed'));
	
	field_purge_batch(1000);
	//Inform user of removal
	
	drupal_set_message($t('Jira Analysis settings saved'));
}
